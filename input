; solving the 8 queens problem

; Interactively reading the size of the board from stdin
{
    .b = 1
    while b (
        @="This is an example program solving the n queens problems, for n no greater than 8.
        Please enter n:
        " ~N = @

        ; checking that we the whole board fits within the machine's word length (64 bits)
        if N <= 0
            @ = "N must be a positive integer!
            "
        else if 0 == 1 << (N * N - 1)
            @ = "N is too big! Please enter a number smaller than N.
            "
        else
            b = 0
    )
}

; We keep a danger grid encoded on the N*N first bits of a 64 bit integer.
; ~LINE represents the first row of danger, with the first N bits set.
~LINE = (1 << N) - 1
; ~COLUMN represents the first column of danger.
@ = ~COLUMN = {
    . = 1 
    ; using array initialisation as a for loop
    new[N - 1] = (. = . || (. << N) )
}

@ = 0x0101010101010101
@ = ~DIAG1 = 
{
    . = 1
    new[N - 1] = (. = . || (. << (N+1) ))
}
@ = 0x8040201008040201
@ = ~DIAG2 = 
{
    . = 1 << N - 1
    new[N - 1] = (. = . || (. << (N-1) ))
}
@ = 0x0102040810204080

; checks whether position ?? ? of ??? is free from attack
;??? is an integer encoding all the currently threatened position of the board
;?? is 0 based, ? is 0 based
### .isplaceok = ! ((1 << (?? + N * ?)) && ???)
; it won't be used but it's good for sport

; ? is a 1 based array of 1 based heights of queens
; it is tranformed into an N by N table for display
# .printsolution = {.=
    @ = new[.i=N] = (
            new[.j=N] = (?[i]  == j, (j = j-1)),
            (i = i-1)
            )
}
; # printsolution (new [._ = N] = (_, (_ = _ - 1)) ) ;

; update danger integer ??? with respect to the addition of queen of coordinate ?? ?, 0 based
### addonequeen 0 = (
??? || (LINE << (N * ?))
    || (COLUMN << ??)
    || (DIAG1 << (N * (? - ??)))
    || (DIAG2 << (N * (?? + ? - 7)))
)
;;{{ test
@ = ##(# addonequeen) 0 0 ;
@ = LINE + COLUMN + DIAG1 - 2;

@ = ##(# addonequeen) 0 (N-1) ;
@ = (LINE << (N-1) * N) || COLUMN || DIAG2;

@ = ##(# addonequeen) (N-1) 0 ;
@ = LINE || (COLUMN << (N-1)) || DIAG2;
;}}

; given a danger line, gives an Iterator over the safe column number, 1 based
# .itsafe LINE = {
    .nil = ()   ; this is hacky, we could return zero instead.
    .i = 0
    #.= (
        while (??) (
            ?? % 2 => (?? = ?? // 2
                return (i = i + 1) ) ;
            ?? = ?? // 2
            i = i + 1
        )
        ; the whole beauty of it is that ?? is persistent
        return 0
    ) 
}
;{{
.it = #itsafe 45
new [N] = (@ = #it)
;}}


; add to board ??? all queens from ?? to N with respect to danger integer ?
### .addqueenlocal =
{
    if ?? > N
        return #printsolution ???;
        
; otherwise we try to place the ??-th queen
    {
        ._addqueenlocal = ##addqueenlocal ??? (?? + 1);
        ._addonequeen = #addonequeen ?;
        .it = #itsafe ((((!! ?) >> (N * (?? - 1))) && LINE) ) ;
        while ( .j = #it ) (
            ???[??] = j
            .r = (#_addqueenlocal (##_addonequeen (j-1) (?? - 1) ))
;            .r = (###addqueenlocal ??? (?? + 1) (###addonequeen ? (j-1) (??-1) ))
            if r (return (r));
        )
    }
    return 0 ; it's important to return falsy, as it's not done automatically
}

### addqueenlocal (new [N]) 1 0;

return 0
